package com.rest.domain;
// Generated Feb 26, 2018 8:43:55 PM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import com.fasterxml.jackson.annotation.JsonBackReference;

/**
 * UserProfile generated by hbm2java
 */
@Entity
@Table(name = "user_profile", catalog = "ifAR", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class UserProfile implements java.io.Serializable {

	private String userAccountUsername;
	private UserAccount userAccount;
	private String fullname;
	private Date birth;
	private String address;
	private String city;
	private String email;
	private String phone;
	private int sexual;
	private Date createdAt;
	private Date updatedAt;

	public UserProfile() {
	}

	public UserProfile(UserAccount userAccount, String fullname, Date birth, String address, String city, String email,
			String phone, int sexual, Date createdAt, Date updatedAt) {
		this.userAccount = userAccount;
		this.fullname = fullname;
		this.birth = birth;
		this.address = address;
		this.city = city;
		this.email = email;
		this.phone = phone;
		this.sexual = sexual;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "userAccount"))
	@Id
	@GeneratedValue(generator = "generator")

	@Column(name = "user_account_username", unique = true, nullable = false, length = 50)
	public String getUserAccountUsername() {
		return this.userAccountUsername;
	}

	public void setUserAccountUsername(String userAccountUsername) {
		this.userAccountUsername = userAccountUsername;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	@JsonBackReference
	public UserAccount getUserAccount() {
		return this.userAccount;
	}

	public void setUserAccount(UserAccount userAccount) {
		this.userAccount = userAccount;
	}

	@Column(name = "fullname", nullable = false, length = 50)
	public String getFullname() {
		return this.fullname;
	}

	public void setFullname(String fullname) {
		this.fullname = fullname;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "birth", nullable = false, length = 19)
	public Date getBirth() {
		return this.birth;
	}

	public void setBirth(Date birth) {
		this.birth = birth;
	}

	@Column(name = "address", nullable = false, length = 250)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "city", nullable = false, length = 30)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Column(name = "email", unique = true, nullable = false, length = 90)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "phone", nullable = false, length = 11)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "sexual", nullable = false)
	public int getSexual() {
		return this.sexual;
	}

	public void setSexual(int sexual) {
		this.sexual = sexual;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", nullable = false, length = 19)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

}
